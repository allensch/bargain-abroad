// Generated by CoffeeScript 1.6.2
(function() {
  var ObjectId, User, bcrypt, crypto, defaultImage, emailHashMap, errors, getGravatarUrl, mongoose, timestamp, validate;

  crypto = require('crypto');

  errors = require('../errors');

  mongoose = require('mongoose');

  bcrypt = require('bcrypt-nodejs');

  timestamp = require('mongoose-times');

  validate = require('mongoose-validate');

  ObjectId = mongoose.Schema.Types.ObjectId;

  User = new mongoose.Schema({
    password: {
      type: String,
      'default': null
    },
    token: {
      type: String,
      'default': null
    },
    facebook: {
      type: Object,
      'default': null
    },
    email: {
      type: String,
      required: true,
      unique: true,
      validate: [validate['email'], errors.user.invalidEmail]
    }
  });

  User.path('password').validate((function(value) {
    if (this.isImvu) {
      return true;
    }
    return value && value.length && value.length > 5;
  }), errors.user.passwordLength);


  User.methods.hashPassword = function(callback) {
    var _this = this;

    bcrypt.hash(this.password, null, null, function(error, hash) {
      if (error) {
        callback(error);
      } else {
        _this.password = hash;
        callback(null, _this);
      }
    });
  };

  User.methods.checkPassword = function(value, callback) {
    bcrypt.compare(value, this.password, function(error, result) {
      callback(error, result);
    });
  };

  User.methods.toResponseObject = function(imvuInfo) {
    var item, keys;

    keys = ['isPartner', 'isFacebook', 'isVerified', 'avatar', 'email', 'phone'];
    item = Object.select(this.toObject(), keys);
    if (this.isFacebook) {
      item.imageUrl = 'http://graph.facebook.com/' + this.facebook.id + '/picture';
    } else {
      item.imageUrl = getGravatarUrl(this.email);
    }
    if (imvuInfo) {
      item.imvu = imvuInfo;
    }
    return item;
  };

  User.plugin(timestamp, {
    created: 'created_at',
    lastUpdated: 'updated_at'
  });

  module.exports = mongoose.model('User', User);

  module.exports.collection.dropIndex({
    avatar: 1
  });

  emailHashMap = {};

  getGravatarUrl = function(email) {
    var hex, md5;

    if (!emailHashMap[email]) {
      md5 = crypto.createHash('md5');
      md5.update(email);
      hex = md5.digest('hex');
      emailHashMap[email] = 'http://www.gravatar.com/avatar/' + hex;
    }
    return emailHashMap[email];
  };

}).call(this);
